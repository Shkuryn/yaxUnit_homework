#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    ЮТТесты.ДобавитьТестовыйНабор("ПоступлениеСписаниеТоваров")
		.ДобавитьТест("ПриходТовара", "ПриходТовара", "TASK-10, Шкурин Игорь")
		.ДобавитьТест("РасходТовара", "РасходТовара", "TASK-10, Шкурин Игорь")
		.ВТранзакции()	
	;
КонецПроцедуры   

Процедура ПриходТовара() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	 // - Создание Группы товаров
	Спорттовары = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
	.ФикцияОбязательныхПолей()
	.Установить("ЭтоГруппа", Истина)
	.Установить("Наименование", НСтр("ru = 'Спорттовары'"))
	.Записать()
	;
	
	// - Создание Справочник.Товары
	ТоварСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
	.ФикцияОбязательныхПолей()
	.ФикцияРеквизитов("Штрихкод, Описание")
	.Установить("Наименование", НСтр("ru = 'Футбольный мяч'"))
	.Установить("Вид", Перечисления.ВидыТоваров.Товар)  
	.Установить("Родитель", Спорттовары)  
	.Записать()
	;          
	
	// - Создание Справочник.Склады
	СкладСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Склады")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("НеИспользовать", Ложь) 
	.Установить("Наименование", НСтр("ru = 'Спорттовары'"))
	.Записать()
	;                                                  
	
	
	// - Создание Справочник.Валюты
	ВалютаСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Валюты")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("НаименованиеОсновнойВалюты", НСтр("ru = 'рубль'")) 
	.Установить("НаименованиеРазменнойВалюты", НСтр("ru = 'копейка'"))
	.Записать()
	;
	
	
	// - Создание Справочник.Организации
	ОрганизацияСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Организации")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("ВалютныйУчет", Истина)
	.Записать()
	;

   
	// - Создание Документ.ПриходТовара
	ПоступлениеТовараСсылка = ЮТест.Данные().КонструкторОбъекта("Документ.ПриходТовара")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Дата", ТекущаяДатаСеанса()) 
	.ФикцияРеквизитов("Поставщик")
	.Установить("Склад", СкладСсылка) 
	.Установить("Валюта", ВалютаСсылка) 
	.Установить("Организация", ОрганизацияСсылка)
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
				.Установить("Товар", ТоварСсылка) 
				.Установить("Цена", 5000) 
				.Установить("Количество", 10) 
				.Установить("Сумма", 50000)
	;

    // 2. Выполнение функции.
	Док = ПоступлениеТовараСсылка.Провести();
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(Док)
		.ИмеетТип("ДокументСсылка.ПриходТовара")
		.Свойство("Проведен").Равно(Истина)
		;

КонецПроцедуры

Процедура РасходТовара() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	 // - Создание Группы товаров
	Спорттовары = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
	.ФикцияОбязательныхПолей()
	.Установить("ЭтоГруппа", Истина)
	.Установить("Наименование", НСтр("ru = 'Спорттовары'"))
	.Записать()
	;
	
	// - Создание Справочник.Товары
	ТоварСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
	.ФикцияОбязательныхПолей()
	.ФикцияРеквизитов("Штрихкод, Описание")
	.Установить("Наименование", НСтр("ru = 'Футбольный мяч'"))
	.Установить("Вид", Перечисления.ВидыТоваров.Товар)  
	.Установить("Родитель", Спорттовары)  
	.Записать()
	;          
	
	// - Создание Справочник.Склады
	СкладСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Склады")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("НеИспользовать", Ложь) 
	.Установить("Наименование", НСтр("ru = 'Спорттовары'"))
	.Записать()
	;                                                  
	
	
	// - Создание Справочник.Валюты
	ВалютаСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Валюты")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("НаименованиеОсновнойВалюты", НСтр("ru = 'рубль'")) 
	.Установить("НаименованиеРазменнойВалюты", НСтр("ru = 'копейка'"))
	.Записать()
	;
	
	
	// - Создание Справочник.Организации
	ОрганизацияСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.Организации")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("ВалютныйУчет", Истина)
	.Записать()
	; 
	
	// - Создание Справочник.ВидыЦен
	ВидЦеныРозничная = Справочники.ВидыЦен.НайтиПоНаименованию("Розничная");
	Если ВидЦеныРозничная.Пустая() Тогда 
		
	// - Создание Справочник.ВидыЦен
	ВидЦеныСсылка = ЮТест.Данные().КонструкторОбъекта("Справочник.ВидыЦен")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
    .Установить("Наименование", "Розничная")
	.Записать()
	;

	КонецЕсли;

	// - Создание Документ.РасходТовара
	РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документ.РасходТовара")
	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля
	.Установить("Дата", ТекущаяДатаСеанса()) 
	.ФикцияРеквизитов("Покупатель")
	.Установить("Склад", СкладСсылка) 
	.Установить("Валюта", ВалютаСсылка) 
	.Установить("Организация", ОрганизацияСсылка)
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
				.Установить("Товар", ТоварСсылка) 
				.Установить("Цена", 6000) 
				.Установить("Количество", 10) 
				.Установить("Сумма", 60000)
	;

    // 2. Выполнение функции.
	Док = РасходТовара.Провести();
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(Док)
		.ИмеетТип("ДокументСсылка.РасходТовара")
		.Свойство("Проведен").Равно(Истина)
		;

КонецПроцедуры


//Процедура ПолучитьОписаниеТоваровПоАртикулуПозитив() Экспорт
//	
//	// 1. Подготовка параметров и генерация данных для выполнения функции.
//	Артикул = "Bos0009";	
//	
//	// 2. Выполнение функции.
//	Товар = API_ОписанияТоваров.ПолучитьТоварПоАртикулу(Артикул);
//	
//	// 3. Проверка результата.
//	ЮТест.ОжидаетЧто(Товар)
//		.ИмеетТип("СправочникОбъект.Товары")
//		.Свойство("Артикул").Равно(Артикул)
//		.Свойство("Наименование").Равно("Босоножки")
//		;
//		
//КонецПроцедуры  
//	
//Процедура ПолучитьОписаниеТоваровПоАртикулуНегатив() Экспорт
//	
//	// 1. Подготовка параметров и генерация данных для выполнения функции.
//	Артикул = "111111111112222222222223333333";	
//	
//	// 2. Выполнение функции.
//	Товар = API_ОписанияТоваров.ПолучитьТоварПоАртикулу(Артикул);
//	
//	// 3. Проверка результата.
//	ЮТест.ОжидаетЧто(Товар)
//		.ИмеетТип("Неопределено")
//		;
//		
//КонецПроцедуры 
//	
//Процедура ПолучитьОписаниеТоваровПоАртикулуПозитивСоздание() Экспорт

//	// 1. Подготовка параметров и генерация данных для выполнения функции.
//	
//	// Описание программного создания: https://bia-technologies.github.io/yaxunit/docs/features/test-data/data-generation/
//	Артикул = "Test1234";
//	Наименование = "Test_Хлеб";
//	
//	// Создание товара
//	НовыйТовар = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
//		.ФикцияОбязательныхПолей()
//		.Установить("Артикул", Артикул) // проверочный артикул
//		.Установить("Наименование", Наименование) // проверочное наименование
//		.ФикцияРеквизитов("Поставщик, Вид, Штрихкод, Описание")
//		.Записать()
//		;	
//	
//	// 2. Выполнение функции.
//	Товар = API_ОписанияТоваров.ПолучитьТоварПоАртикулу(Артикул);
//	
//	// 3. Проверка результата.
//	ЮТест.ОжидаетЧто(Товар)
//		.ИмеетТип("СправочникОбъект.Товары")
//		.Свойство("Артикул").Равно(Артикул)
//		.Свойство("Наименование").Равно(Наименование)
//		;

//КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти